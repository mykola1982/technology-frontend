{"version":3,"file":"static/js/439.292ad481.chunk.js","mappings":"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","sources":["components/MyContainer/MyContainer.jsx","components/OrderList/OrderList.jsx","pages/Orders/Orders.jsx","services/orders-API.js"],"sourcesContent":["import { Container } from \"@mui/material\";\r\n\r\nexport const MyContainer = ({ children }) => {\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ display: \"flex\", height: \"100vh\", gap: 2 }}>\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n","import {\r\n  TableContainer,\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Paper,\r\n} from \"@mui/material\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport const OrderList = ({ orders }) => {\r\n  // тут щось треба розыбратись\r\n  // const reverseOrders = orders.reverse();\r\n  // console.log(\"orders\", orders);\r\n  // console.log(orders[0]);\r\n  // orders.reverse();\r\n  // console.log(orders[0]);\r\n  // console.log(\"revers orders\", orders);\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\"> № п.п </TableCell>\r\n            <TableCell align=\"center\"> Дата створення </TableCell>\r\n            <TableCell align=\"center\">\r\n              Найменування деталей та кількість деталей в замовленні\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n              Сортамент та кількість потрібного металу для виконання замовлення\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {orders.map((order, index) => {\r\n            const { _id, createdAt, products, materials } = order;\r\n\r\n            //  винести в окрему функцію\r\n            const dateTime = new Date(createdAt);\r\n\r\n            const formattedDate = dateTime.toLocaleDateString(\"uk-UA\");\r\n            const formattedTime = dateTime.toLocaleTimeString(\"uk-UA\", {\r\n              hour12: false,\r\n            });\r\n\r\n            const formattedDateTime = `${formattedDate} ${formattedTime}`;\r\n            //   _____________\r\n\r\n            return (\r\n              <TableRow\r\n                key={_id}\r\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n              >\r\n                <TableCell align=\"center\">{index + 1}</TableCell>\r\n                <TableCell aling=\"center\">{formattedDateTime}</TableCell>\r\n                <TableCell aling=\"center\">\r\n                  {products.map(({ name, number, reserved }, index) => {\r\n                    return (\r\n                      <p key={nanoid()}>\r\n                        {\" \"}\r\n                        {index + 1}.{name}\r\n                        {\"  \"}\r\n                        {number} - {reserved} шт.\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </TableCell>\r\n                <TableCell aling=\"center\">\r\n                  {materials.map(({ sheet, thickness, amount }, index) => {\r\n                    return (\r\n                      <p key={nanoid()}>\r\n                        {index + 1}.{thickness}x{sheet} - {amount.toFixed(3)}{\" \"}\r\n                        листів.\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { Box } from \"@mui/material\";\r\n\r\nimport { MyContainer } from \"../../components/MyContainer\";\r\n\r\nimport * as orderAPI from \"../../services/orders-API\";\r\nimport { OrderList } from \"../../components/OrderList\";\r\n\r\nconst Orders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function getAllOrders() {\r\n      try {\r\n        setIsLoading(true);\r\n        const { data } = await orderAPI.fetchAllOrdersAPI();\r\n        setOrders(data.orders);\r\n      } catch (error) {\r\n        toast.error(`Щось пішло не так. Спробуй знову...`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    getAllOrders();\r\n  }, []);\r\n\r\n  return (\r\n    <MyContainer>\r\n      <Box\r\n        sx={{\r\n          width: \"100%\",\r\n          borderRadius: 4,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          gap: \"12px\",\r\n          mt: 10,\r\n          mb: 2,\r\n          p: 1,\r\n          backgroundColor: \"#f5f5f5\",\r\n          boxShadow: \"0 0 8px 0 rgba(0,0,0,.3)\",\r\n        }}\r\n      >\r\n        <OrderList orders={orders} />\r\n      </Box>\r\n    </MyContainer>\r\n  );\r\n};\r\n\r\nexport default Orders;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://technology-backend.onrender.com/api\";\r\n\r\nexport const fetchAllOrdersAPI = async () => {\r\n  const { data } = await axios.get(\"/orders\");\r\n  return data;\r\n};\r\n\r\nexport const fetchOrderAPI = async (id) => {\r\n  const { data } = await axios.get(`/product/${id}`);\r\n  return data;\r\n};\r\n\r\nexport const addOrderAPI = async (body) => {\r\n  const { data } = await axios.post(\"/orders\", body);\r\n  return data;\r\n};\r\n\r\nexport const removeOrderAPI = async (id) => {\r\n  const { data } = await axios.delete(`/order/${id}`);\r\n  return data;\r\n};\r\n"],"names":["MyContainer","children","Container","maxWidth","sx","display","height","gap","OrderList","orders","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","order","index","_id","createdAt","products","materials","dateTime","Date","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","hour12","formattedDateTime","border","aling","name","number","reserved","nanoid","sheet","thickness","amount","toFixed","useState","setOrders","setIsLoading","useEffect","orderAPI","data","toast","getAllOrders","Box","width","borderRadius","flexDirection","alignItems","mt","mb","p","backgroundColor","boxShadow","axios","fetchAllOrdersAPI","addOrderAPI","body"],"sourceRoot":""}