{"version":3,"file":"static/js/749.b73bdba6.chunk.js","mappings":"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","sources":["components/MyContainer/MyContainer.jsx","components/OrderList/OrderList.jsx","utils/formatDate.js","pages/Orders/Orders.jsx","services/orders-API.js","../node_modules/@mui/icons-material/Print.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { Container } from \"@mui/material\";\r\n\r\nexport const MyContainer = ({ children }) => {\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ display: \"flex\", height: \"100vh\", gap: 2 }}>\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Paper,\r\n  IconButton,\r\n} from \"@mui/material\";\r\n\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\nimport { formatDate } from \"utils/formatDate\";\r\n\r\nexport const OrderList = ({ orders, location }) => {\r\n  // винести в окрему функцію\r\n  const reverseOrders = orders.reduce((acc, element) => {\r\n    return (acc = [element, ...acc]);\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\"> № п.п </TableCell>\r\n            <TableCell align=\"center\"> Дата створення </TableCell>\r\n            <TableCell align=\"center\">\r\n              Найменування деталей та кількість деталей в замовленні\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n              Сортамент та кількість потрібного металу для виконання замовлення\r\n            </TableCell>\r\n            <TableCell align=\"center\">Дії</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {reverseOrders.map((order, index) => {\r\n            const { _id, createdAt, products, materials } = order;\r\n\r\n            const formattedDateTime = formatDate(createdAt);\r\n\r\n            return (\r\n              <TableRow\r\n                key={_id}\r\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n              >\r\n                <TableCell align=\"center\">{index + 1}</TableCell>\r\n                <TableCell aling=\"center\">\r\n                  {formattedDateTime} {order.user}\r\n                </TableCell>\r\n                <TableCell aling=\"center\">\r\n                  {products.map(({ name, number, reserved }, index) => {\r\n                    return (\r\n                      <p key={nanoid()}>\r\n                        {\" \"}\r\n                        {index + 1}. {name}\r\n                        {\"  \"}\r\n                        {number} - {reserved} шт.\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </TableCell>\r\n                <TableCell aling=\"center\">\r\n                  {materials.map(({ sheet, thickness, amount }, index) => {\r\n                    return (\r\n                      <p key={nanoid()}>\r\n                        {index + 1}. {thickness}x{sheet} - {amount.toFixed(3)}{\" \"}\r\n                        листів.\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </TableCell>\r\n                <TableCell aling=\"center\">\r\n                  <IconButton\r\n                    component={Link}\r\n                    to={`/orders/${_id}`}\r\n                    state={{ from: location }}\r\n                    sx={{ color: \"#1976d2\" }}\r\n                    aria-label=\"print order\"\r\n                    size=\"medium\"\r\n                  >\r\n                    <PrintIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","export function formatDate(date) {\r\n  const dateTime = new Date(date);\r\n  const formattedDate = dateTime.toLocaleDateString(\"uk-UA\");\r\n  const formattedTime = dateTime.toLocaleTimeString(\"uk-UA\", { hours: false });\r\n\r\n  return `${formattedDate} ${formattedTime}`;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport { Box } from \"@mui/material\";\r\n\r\nimport { MyContainer } from \"../../components/MyContainer\";\r\n\r\nimport * as orderAPI from \"../../services/orders-API\";\r\nimport { OrderList } from \"../../components/OrderList\";\r\n\r\nconst Orders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  const location = useLocation();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function getAllOrders() {\r\n      try {\r\n        setIsLoading(true);\r\n        const { data } = await orderAPI.fetchAllOrdersAPI();\r\n        setOrders(data);\r\n      } catch (error) {\r\n        toast.error(`Щось пішло не так. Спробуй знову...`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    getAllOrders();\r\n  }, []);\r\n\r\n  return (\r\n    <MyContainer>\r\n      <Box\r\n        sx={{\r\n          width: \"100%\",\r\n          borderRadius: 4,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          gap: \"12px\",\r\n          mt: 10,\r\n          mb: 2,\r\n          p: 1,\r\n          backgroundColor: \"#f5f5f5\",\r\n          boxShadow: \"0 0 8px 0 rgba(0,0,0,.3)\",\r\n        }}\r\n      >\r\n        <OrderList orders={orders} location={location} />\r\n      </Box>\r\n    </MyContainer>\r\n  );\r\n};\r\n\r\nexport default Orders;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://technology-backend.onrender.com/api\";\r\n\r\nexport const fetchAllOrdersAPI = async () => {\r\n  const { data } = await axios.get(\"/orders\");\r\n  return data;\r\n};\r\n\r\nexport const fetchOrderAPI = async (id) => {\r\n  const { data } = await axios.get(`/orders/${id}`);\r\n  return data;\r\n};\r\n\r\nexport const addOrderAPI = async (body) => {\r\n  const { data } = await axios.post(\"/orders\", body);\r\n  return data;\r\n};\r\n\r\nexport const removeOrderAPI = async (id) => {\r\n  const { data } = await axios.delete(`/order/${id}`);\r\n  return data;\r\n};\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');\nexports.default = _default;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["MyContainer","children","Container","maxWidth","sx","display","height","gap","OrderList","orders","location","reverseOrders","reduce","acc","element","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","order","index","_id","createdAt","products","materials","formattedDateTime","date","dateTime","Date","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","hours","formatDate","border","aling","user","name","number","reserved","nanoid","sheet","thickness","amount","toFixed","IconButton","Link","to","state","from","color","size","Print","fontSize","useState","setOrders","useLocation","setIsLoading","useEffect","orderAPI","data","toast","getAllOrders","Box","width","borderRadius","flexDirection","alignItems","mt","mb","p","backgroundColor","boxShadow","axios","fetchAllOrdersAPI","fetchOrderAPI","id","addOrderAPI","body","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}