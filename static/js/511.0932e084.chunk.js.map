{"version":3,"file":"static/js/511.0932e084.chunk.js","mappings":"oKAEaA,EAAc,SAAH,GAAsB,IAAhBC,EAAQ,EAARA,SAC5B,OACE,SAACC,EAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,QAAS,OAAQC,OAAQ,QAASC,IAAK,GAAI,SACvEN,GAGP,C,+LCAMO,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,SAAS,0BAC5BC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,2MACPF,SAAS,0BACZG,KAAMN,EAAAA,KAEHO,MAAM,CAAC,QAAS,SAChBJ,SAAS,4BAGRK,GAAcC,EAAAA,EAAAA,MACdC,GAAkBD,EAAAA,EAAAA,MAClBE,GAAcF,EAAAA,EAAAA,MAEdG,EAAgB,CACpBV,KAAM,GACNE,SAAU,GACVE,KAAM,QAGKO,EAAc,WACzB,OAAkDC,EAAAA,EAAAA,UAAS,YAAW,eAA/DC,EAAiB,KAAEC,EAAoB,KACxCC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,yCAAG,WAAOC,EAAO,GAAD,4EAAa,OAATC,EAAS,EAATA,UAAS,kBAErCJ,GAASK,EAAAA,EAAAA,IAASF,IAAS,KAAD,wDAGlCC,IAAY,wDACb,gBANiB,wCAgBlB,OACE,+BACE,SAAC,KAAM,CACLT,cAAeA,EACfb,iBAAkBA,EAClBwB,SAAUJ,EAAa,UAEvB,UAAC,KAAI,YACH,kBAAOK,QAAShB,EAAY,SAAC,oCAC7B,SAAC,KAAK,CACJiB,GAAIjB,EACJkB,KAAK,OACLxB,KAAK,OACLyB,YAAY,oEAEd,SAAC,KAAY,CAACzB,KAAK,OAAO0B,UAAU,OACpC,kBAAOJ,QAASd,EAAgB,SAAC,0CACjC,SAAC,KAAK,CACJe,GAAIf,EACJgB,KAAMX,EACNb,KAAK,WACLyB,YAAY,qFAEd,mBAAQD,KAAK,SAASG,QA/BT,WACO,aAAtBd,EACFC,EAAqB,QACU,SAAtBD,GACTC,EAAqB,WAEzB,EAyBoD,SACnB,aAAtBD,EACG,wFACA,iGAEN,SAAC,KAAY,CAACb,KAAK,WAAW0B,UAAU,OACxC,gBAAKH,GAAId,EAAY,SAAC,wGACtB,iBAAKL,KAAK,QAAQ,kBAAiBK,EAAY,WAC7C,8BACE,SAAC,KAAK,CAACe,KAAK,QAAQxB,KAAK,OAAO4B,MAAM,UAAU,qFAGlD,8BACE,SAAC,KAAK,CAACJ,KAAK,QAAQxB,KAAK,OAAO4B,MAAM,SAAS,mEAGjD,SAAC,KAAY,CAAC5B,KAAK,OAAO0B,UAAU,UAEtC,mBAAQF,KAAK,SAAQ,SAAC,+HAKhC,ECtEA,EArBc,WACZ,OACE,SAACnC,EAAA,EAAW,WACV,SAACwC,EAAA,EAAG,CACFpC,GAAI,CACFqC,MAAO,OACPC,aAAc,EACdrC,QAAS,OACTsC,GAAI,GACJC,GAAI,EACJC,EAAG,EACHC,gBAAiB,UACjBC,UAAW,4BACX,UAEF,SAACzB,EAAW,OAIpB,C,wDCvBO,IAkBIJ,EAAS,WAAH,IAAI8B,EAAO,UAAH,6CAAG,GAAE,OAC5BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAClB,EAAImB,GAWvD,OAREnB,IAFFmB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/MyContainer/MyContainer.jsx","components/AddUserForm/AddUserForm.jsx","pages/Users/Users.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { Container } from \"@mui/material\";\r\n\r\nexport const MyContainer = ({ children }) => {\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ display: \"flex\", height: \"100vh\", gap: 2 }}>\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nimport { register } from \"../../redux/auth/authOperation\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n  name: yup.string().required(\"This field is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Пароль повинен мати не менше 8 символів\")\r\n    .required(\"This field is required\"),\r\n  role: yup\r\n    .string()\r\n    .oneOf([\"ADMIN\", \"USER\"])\r\n    .required(\"This field is required\"),\r\n});\r\n\r\nconst idInputName = nanoid();\r\nconst idInputPassword = nanoid();\r\nconst idInputRole = nanoid();\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  password: \"\",\r\n  role: \"USER\",\r\n};\r\n\r\nexport const AddUserForm = () => {\r\n  const [typeInputPassword, setTypeInputPassword] = useState(\"password\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      await dispatch(register(values));\r\n    } catch (error) {}\r\n\r\n    resetForm();\r\n  };\r\n\r\n  const showPassword = () => {\r\n    if (typeInputPassword === \"password\") {\r\n      setTypeInputPassword(\"text\");\r\n    } else if (typeInputPassword === \"text\") {\r\n      setTypeInputPassword(\"password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form>\r\n          <label htmlFor={idInputName}>Логін</label>\r\n          <Field\r\n            id={idInputName}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Введіть ім'я\"\r\n          />\r\n          <ErrorMessage name=\"name\" component=\"p\" />\r\n          <label htmlFor={idInputPassword}>Пароль</label>\r\n          <Field\r\n            id={idInputPassword}\r\n            type={typeInputPassword}\r\n            name=\"password\"\r\n            placeholder=\"Введіть пароль\"\r\n          />\r\n          <button type=\"button\" onClick={showPassword}>\r\n            {typeInputPassword === \"password\"\r\n              ? \"Показати пароль\"\r\n              : \"Приховати пароль\"}\r\n          </button>\r\n          <ErrorMessage name=\"password\" component=\"p\" />\r\n          <div id={idInputRole}> Права користувача</div>\r\n          <div role=\"group\" aria-labelledby={idInputRole}>\r\n            <label>\r\n              <Field type=\"radio\" name=\"role\" value=\"ADMIN\" />\r\n              Адміністратор\r\n            </label>\r\n            <label>\r\n              <Field type=\"radio\" name=\"role\" value=\"USER\" />\r\n              Користувач\r\n            </label>\r\n            <ErrorMessage name=\"role\" component=\"p\" />\r\n          </div>\r\n          <button type=\"submit\"> Створити користувача</button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\n\r\nimport { MyContainer } from \"../../components/MyContainer\";\r\nimport { AddUserForm } from \"../../components/AddUserForm\";\r\n\r\nconst Users = () => {\r\n  return (\r\n    <MyContainer>\r\n      <Box\r\n        sx={{\r\n          width: \"100%\",\r\n          borderRadius: 4,\r\n          display: \"flex\",\r\n          mt: 10,\r\n          mb: 2,\r\n          p: 1,\r\n          backgroundColor: \"#f5f5f5\",\r\n          boxShadow: \"0 0 8px 0 rgba(0,0,0,.3)\",\r\n        }}\r\n      >\r\n        <AddUserForm />\r\n      </Box>\r\n    </MyContainer>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["MyContainer","children","Container","maxWidth","sx","display","height","gap","validationSchema","yup","shape","name","required","password","min","role","oneOf","idInputName","nanoid","idInputPassword","idInputRole","initialValues","AddUserForm","useState","typeInputPassword","setTypeInputPassword","dispatch","useDispatch","handleSubmit","values","resetForm","register","onSubmit","htmlFor","id","type","placeholder","component","onClick","value","Box","width","borderRadius","mt","mb","p","backgroundColor","boxShadow","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}