{"version":3,"file":"static/js/480.6987178b.chunk.js","mappings":"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","sources":["components/MyContainer/MyContainer.jsx","data/fakeAPI.js","redux/materials/materialsSelector.js","components/MaterialsList/MaterialsList.jsx","components/AddSheetForm/AddSheetForm.jsx","components/AddRodForm/AddRodForm.jsx","components/AddMaterialForm/AddMaterialForm.jsx","pages/Materials/Materials.jsx","../node_modules/@mui/icons-material/DeleteForever.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { Container } from \"@mui/material\";\r\n\r\nexport const MyContainer = ({ children }) => {\r\n  return (\r\n    <Container\r\n      maxWidth=\"xl\"\r\n      sx={{\r\n        display: \"flex\",\r\n        gap: 2,\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n","export const materials = [\r\n  {\r\n    id: \"1\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"0.8\",\r\n    weightSheet: 20.8,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"1.0\",\r\n    weightSheet: 26,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"1.2\",\r\n    weightSheet: 31.2,\r\n  },\r\n  {\r\n    id: \"4\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"1.5\",\r\n    weightSheet: 39,\r\n  },\r\n  {\r\n    id: \"5\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"2.0\",\r\n    weightSheet: 52,\r\n  },\r\n  {\r\n    id: \"6\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"2.5\",\r\n    weightSheet: 65,\r\n  },\r\n  {\r\n    id: \"7\",\r\n    sizeSheet: \"2500x1250 Оц.\",\r\n    thicknessSheet: \"3.0\",\r\n    weightSheet: 78,\r\n  },\r\n  {\r\n    id: \"8\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"0.8\",\r\n    weightSheet: 20.8,\r\n  },\r\n  {\r\n    id: \"9\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"1.0\",\r\n    weightSheet: 26,\r\n  },\r\n  {\r\n    id: \"10\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"1.2\",\r\n    weightSheet: 31.2,\r\n  },\r\n  {\r\n    id: \"11\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"1.5\",\r\n    weightSheet: 39,\r\n  },\r\n  {\r\n    id: \"12\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"2.0\",\r\n    weightSheet: 52,\r\n  },\r\n  {\r\n    id: \"13\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"2.5\",\r\n    weightSheet: 65,\r\n  },\r\n  {\r\n    id: \"14\",\r\n    sizeSheet: \"2500x1250 Ст3.\",\r\n    thicknessSheet: \"3.0\",\r\n    weightSheet: 78,\r\n  },\r\n  {\r\n    id: \"15\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"0.8\",\r\n    weightSheet: 20,\r\n  },\r\n  {\r\n    id: \"16\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"1.0\",\r\n    weightSheet: 25,\r\n  },\r\n  {\r\n    id: \"17\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"1.2\",\r\n    weightSheet: 30,\r\n  },\r\n  {\r\n    id: \"18\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"1.5\",\r\n    weightSheet: 37.5,\r\n  },\r\n  {\r\n    id: \"19\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"2.0\",\r\n    weightSheet: 50,\r\n  },\r\n  {\r\n    id: \"20\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"2.5\",\r\n    weightSheet: 62.5,\r\n  },\r\n  {\r\n    id: \"21\",\r\n    sizeSheet: \"2500x1250 AISI 430\",\r\n    thicknessSheet: \"3.0\",\r\n    weightSheet: 75,\r\n  },\r\n  {\r\n    id: \"22\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"0.8\",\r\n    weightSheet: 20,\r\n  },\r\n  {\r\n    id: \"23\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"1.0\",\r\n    weightSheet: 25,\r\n  },\r\n  {\r\n    id: \"24\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"1.2\",\r\n    weightSheet: 30,\r\n  },\r\n  {\r\n    id: \"25\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"1.5\",\r\n    weightSheet: 37.5,\r\n  },\r\n  {\r\n    id: \"26\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"2.0\",\r\n    weightSheet: 50,\r\n  },\r\n  {\r\n    id: \"27\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"2.5\",\r\n    weightSheet: 62.5,\r\n  },\r\n  {\r\n    id: \"28\",\r\n    sizeSheet: \"2500x1250 AISI 304\",\r\n    thicknessSheet: \"3.0\",\r\n    weightSheet: 75,\r\n  },\r\n];\r\n\r\nexport const getMaterials = () => {\r\n  return materials;\r\n};\r\n","export const selectMaterials = (state) => state.materials.items;\r\nexport const selectIsLoading = (state) => state.materials.isLoading;\r\nexport const selectError = (state) => state.materials.errors;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  IconButton,\r\n} from \"@mui/material\";\r\n\r\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\n\r\nimport { selectMaterials } from \"redux/materials/materialsSelector\";\r\n\r\nexport const MaterialsList = () => {\r\n  const materials = useSelector(selectMaterials);\r\n  console.log(materials);\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow\r\n            sx={{ position: \"sticky\", top: 0, zIndex: 1, background: \"#fff\" }}\r\n          >\r\n            <TableCell align=\"center\">№ п.п.</TableCell>\r\n            <TableCell align=\"center\">Сортамент</TableCell>\r\n            <TableCell align=\"center\">Вага листа</TableCell>\r\n            <TableCell align=\"center\">Видалити</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          {materials?.map((material, index) => {\r\n            // const { _id, type, brand, sheetParameters, rodParameters, weight } =\r\n            //   material;\r\n\r\n            // const { diameter } = rodParameters;\r\n\r\n            // const { width, length, thickness } = sheetParameters;\r\n            return (\r\n              <TableRow\r\n                key={material._id}\r\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n              >\r\n                <TableCell align=\"center\">{index + 1}</TableCell>\r\n                {material.type === \"sheet\" && (\r\n                  <TableCell align=\"center\">\r\n                    {material.sheetParameters.thickness}x\r\n                    {material.sheetParameters.length}x\r\n                    {material.sheetParameters.width}\r\n                  </TableCell>\r\n                )}\r\n                {material.type === \"rod\" && (\r\n                  <TableCell align=\"center\">\r\n                    {material.rodParameters.diameter}\r\n                  </TableCell>\r\n                )}\r\n\r\n                <TableCell align=\"center\">{material.weight}</TableCell>\r\n                <TableCell align=\"center\">\r\n                  <IconButton\r\n                    sx={{ color: \"#1976d2\" }}\r\n                    aria-label=\"delete\"\r\n                    size=\"medium\"\r\n\r\n                    // onClick={() => openModal(_id)}\r\n                  >\r\n                    <DeleteForeverIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { Button, FormControl, TextField } from \"@mui/material\";\r\n\r\nimport { addMaterial } from \"redux/materials/materialsOperation\";\r\n\r\nconst initialValues = {\r\n  brand: \"\",\r\n  width: \"\",\r\n  length: \"\",\r\n  thickness: \"\",\r\n  weight: \"\",\r\n};\r\n\r\nconst validationSchema = yup.object().shape({\r\n  brand: yup.string().required(\"Це поле є обов'язковим\"),\r\n  width: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n  length: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n  thickness: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n  weight: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n});\r\n\r\nexport const AddSheetForm = ({ type }) => {\r\n  const dispath = useDispatch();\r\n\r\n  const handleSubmit = (\r\n    { brand, width, length, thickness, weight },\r\n    { resetForm }\r\n  ) => {\r\n    const newMaterial = {\r\n      type,\r\n      brand,\r\n      sheetParameters: { width, length, thickness },\r\n      weight,\r\n    };\r\n\r\n    dispath(addMaterial(newMaterial)).then((res) => {\r\n      if (!res.error) {\r\n        resetForm();\r\n      }\r\n    });\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: handleSubmit,\r\n  });\r\n\r\n  return (\r\n    <FormControl\r\n      variant=\"standard\"\r\n      component=\"form\"\r\n      onSubmit={formik.handleSubmit}\r\n    >\r\n      <TextField\r\n        id=\"brand\"\r\n        type=\"text\"\r\n        name=\"brand\"\r\n        label=\"Марка матеріалу\"\r\n        placeholder=\"Введіть марку матеріалу\"\r\n        size=\"small\"\r\n        value={formik.values.brand}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.brand && Boolean(formik.errors.brand)}\r\n        helperText={formik.touched.brand && formik.errors.brand}\r\n      />\r\n\r\n      <TextField\r\n        id=\"thickness\"\r\n        type=\"number\"\r\n        name=\"thickness\"\r\n        inputProps={{ min: \"0\", step: \"0.1\" }}\r\n        label=\"Товщина листа, мм.\"\r\n        placeholder=\"Введіть товщину листа.\"\r\n        size=\"small\"\r\n        value={formik.values.thickness}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.thickness && Boolean(formik.errors.thickness)}\r\n        helperText={formik.touched.thickness && formik.errors.thickness}\r\n      />\r\n\r\n      <TextField\r\n        id=\"length\"\r\n        type=\"number\"\r\n        name=\"length\"\r\n        inputProps={{ min: \"0\", step: \"0.1\" }}\r\n        label=\"Довжина листа, мм.\"\r\n        placeholder=\"Введіть довжину листа\"\r\n        size=\"small\"\r\n        value={formik.values.length}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.length && Boolean(formik.errors.length)}\r\n        helperText={formik.touched.length && formik.errors.length}\r\n      />\r\n\r\n      <TextField\r\n        id=\"width\"\r\n        type=\"number\"\r\n        name=\"width\"\r\n        inputProps={{ min: \"0\", step: \"0.1\" }}\r\n        label=\"Ширина листа, мм.\"\r\n        placeholder=\"Введіть ширину листа\"\r\n        size=\"small\"\r\n        value={formik.values.width}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.width && Boolean(formik.errors.width)}\r\n        helperText={formik.touched.width && formik.errors.width}\r\n      />\r\n\r\n      <TextField\r\n        id=\"weight\"\r\n        type=\"number\"\r\n        name=\"weight\"\r\n        inputProps={{ min: \"0\", step: \"0.001\" }}\r\n        label=\"Вага листа,кг.\"\r\n        placeholder=\"Введіть вагу листа\"\r\n        size=\"small\"\r\n        value={formik.values.weight}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.weight && Boolean(formik.errors.weight)}\r\n        helperText={formik.touched.weight && formik.errors.weight}\r\n      />\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        sx={{ width: \"300px\", margin: \"0 auto\" }}\r\n      >\r\n        Додати матеріал\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { Button, FormControl, TextField } from \"@mui/material\";\r\n\r\nimport { addMaterial } from \"redux/materials/materialsOperation\";\r\n\r\nconst initialValues = {\r\n  brand: \"\",\r\n  diameter: \"\",\r\n  weight: \"\",\r\n};\r\n\r\nconst validationSchema = yup.object().shape({\r\n  brand: yup.string().required(\"Це поле є обов'язковим\"),\r\n  diameter: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n\r\n  weight: yup\r\n    .number()\r\n    .required(\"Це поле є обов'язковим\")\r\n    .moreThan(0, \"Значення повинно бути більше 0\")\r\n    .notOneOf([0], \"Значення не може бути рівним 0\"),\r\n});\r\n\r\nexport const AddRodForm = ({ type }) => {\r\n  const dispath = useDispatch();\r\n\r\n  const handleSubmit = ({ brand, diameter, weight }, { resetForm }) => {\r\n    const newMaterial = {\r\n      type,\r\n      brand,\r\n      rodParameters: { diameter },\r\n      weight,\r\n    };\r\n\r\n    dispath(addMaterial(newMaterial)).then((res) => {\r\n      if (!res.error) {\r\n        resetForm();\r\n      }\r\n    });\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: handleSubmit,\r\n  });\r\n\r\n  return (\r\n    <FormControl\r\n      variant=\"standard\"\r\n      component=\"form\"\r\n      onSubmit={formik.handleSubmit}\r\n    >\r\n      <TextField\r\n        id=\"brand\"\r\n        type=\"text\"\r\n        name=\"brand\"\r\n        label=\"Марка матеріалу\"\r\n        placeholder=\"Введіть марку матеріалу\"\r\n        size=\"small\"\r\n        value={formik.values.brand}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.brand && Boolean(formik.errors.brand)}\r\n        helperText={formik.touched.brand && formik.errors.brand}\r\n      />\r\n\r\n      <TextField\r\n        id=\"diameter\"\r\n        type=\"number\"\r\n        name=\"diameter\"\r\n        inputProps={{ min: \"0\", step: \"0,1\" }}\r\n        label=\"Діаметр круга, мм.\"\r\n        placeholder=\"Введіть діаметр круга\"\r\n        size=\"small\"\r\n        value={formik.values.diameter}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.diameter && Boolean(formik.errors.diameter)}\r\n        helperText={formik.touched.diameter && formik.errors.diameter}\r\n      />\r\n\r\n      <TextField\r\n        id=\"weight\"\r\n        type=\"number\"\r\n        name=\"weight\"\r\n        inputProps={{ min: \"0.001\", step: \"0.001\" }}\r\n        label=\"Вага одного м.п. круга,кг.\"\r\n        placeholder=\"Введіть вагу одного м.п. круга\"\r\n        size=\"small\"\r\n        value={formik.values.weight}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        error={formik.touched.weight && Boolean(formik.errors.weight)}\r\n        helperText={formik.touched.weight && formik.errors.weight}\r\n      />\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        sx={{ width: \"300px\", margin: \"0 auto\" }}\r\n      >\r\n        Додати матеріал\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport { TextField, Typography, MenuItem, Box } from \"@mui/material\";\r\n\r\nimport { AddSheetForm } from \"components/AddSheetForm\";\r\nimport { AddRodForm } from \"components/AddRodForm\";\r\n\r\nconst TYPEMATERIAL = [\r\n  { label: \"Лист\", value: \"sheet\" },\r\n  { label: \"Круг\", value: \"rod\" },\r\n];\r\n\r\nexport const AddMaterialForm = () => {\r\n  const [materialType, setMaterialType] = useState(\"\");\r\n\r\n  const handleTypeChange = (e) => {\r\n    const selectedType = e.target.value;\r\n    setMaterialType(selectedType);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        gap: \"12px\",\r\n        flexDirection: \"column\",\r\n\r\n        width: \"100%\",\r\n        padding: \"8px\",\r\n      }}\r\n    >\r\n      <Typography> Добавити матеріл до списку:</Typography>\r\n\r\n      <TextField\r\n        select\r\n        name=\"type\"\r\n        size=\"small\"\r\n        value={materialType}\r\n        label=\"Тип матеріалу\"\r\n        onChange={handleTypeChange}\r\n      >\r\n        {TYPEMATERIAL.map(({ label, value }) => (\r\n          <MenuItem key={nanoid()} value={value}>\r\n            {label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n\r\n      {materialType === \"sheet\" && <AddSheetForm type={materialType} />}\r\n      {materialType === \"rod\" && <AddRodForm type={materialType} />}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// ________________________________________\r\n// import { useState } from \"react\";\r\n\r\n// import * as yup from \"yup\";\r\n\r\n// import { useFormik } from \"formik\";\r\n\r\n// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormControlLabel,\r\n//   FormLabel,\r\n//   RadioGroup,\r\n//   Radio,\r\n//   FormHelperText,\r\n//   TextField,\r\n// } from \"@mui/material\";\r\n\r\n// const initialValues = {\r\n//   type: \"\",\r\n//   brand: \"\",\r\n//   sheetParameters: { width: \"\", length: \"\", thickness: \"\" },\r\n//   rodParameters: { diameter: \"\" },\r\n//   weight: \"\",\r\n// };\r\n\r\n// const validationSchema = yup.object().shape({\r\n//   type: yup.string().oneOf([\"sheet\", \"rod\"]).required(\"Це поле є обов'язковим\"),\r\n//   brand: yup.string().required(\"Це поле є обов'язковим\"),\r\n\r\n//   sheetParameters: yup.object().when(\"type\", {\r\n//     is: (type) => type === \"sheet\",\r\n//     then: yup.object().shape({\r\n//       width: yup.string().required(\"Це поле є обов'язковим\"),\r\n//       length: yup.string().required(\"Це поле є обов'язковим\"),\r\n//       thickness: yup.string().required(\"Це поле є обов'язковим\"),\r\n//     }),\r\n//     otherwise: yup.object().strip(),\r\n//   }),\r\n\r\n//   rodParameters: yup.object().when(\"type\", {\r\n//     is: (type) => type === \"rod\",\r\n//     then: yup\r\n//       .object()\r\n//       .shape({ diameter: yup.string().required(\"Це поле є обов'язковим\") }),\r\n//     otherwise: yup.object().strip(),\r\n//   }),\r\n//   weight: yup.number().required(\"Це поле є обов'язковим\"),\r\n// });\r\n\r\n// export const AddMaterialForm = () => {\r\n//   const handleSubmit = (values, { resetForm }) => {\r\n//     console.log(values);\r\n//     resetForm();\r\n//   };\r\n\r\n//   const formik = useFormik({\r\n//     initialValues,\r\n//     validationSchema: () => validationSchema(),\r\n//     onSubmit: handleSubmit,\r\n//   });\r\n\r\n//   let labelWeight;\r\n//   if (formik.values.type === \"sheet\") {\r\n//     labelWeight = \"Вага листа,кг.\";\r\n//   } else if (formik.values.type === \"rod\") {\r\n//     labelWeight = \"Вага одного м.п. прута,кг.\";\r\n//   }\r\n\r\n//   let placeholderWeight;\r\n\r\n//   if (formik.values.type === \"sheet\") {\r\n//     placeholderWeight = \"Введіть вагу листа,кг.\";\r\n//   } else if (formik.values.type === \"rod\") {\r\n//     placeholderWeight = \"Введіть вагу одного м.п. прута,кг.\";\r\n//   }\r\n\r\n//   return (\r\n//     <FormControl\r\n//       variant=\"standard\"\r\n//       component=\"form\"\r\n//       onSubmit={formik.handleSubmit}\r\n//     >\r\n//       <FormLabel id=\"radio-buttons-group-type\">Тип метеріалу:</FormLabel>\r\n//       <RadioGroup\r\n//         name=\"type\"\r\n//         aria-labelledby=\"radio-buttons-group-type\"\r\n//         value={formik.values.type}\r\n//         onChange={formik.handleChange}\r\n//       >\r\n//         <FormControlLabel value=\"sheet\" control={<Radio />} label=\"Лист\" />\r\n//         <FormControlLabel value=\"rod\" control={<Radio />} label=\"Круг\" />\r\n//       </RadioGroup>\r\n//       {formik.touched.type && Boolean(formik.errors.type) && (\r\n//         <FormHelperText sx={{ margin: \"4px 14px 0 14px\", color: \"#d32f2f\" }}>\r\n//           {formik.touched.type && formik.errors.type}\r\n//         </FormHelperText>\r\n//       )}\r\n//       <TextField\r\n//         id=\"brand\"\r\n//         type=\"text\"\r\n//         name=\"brand\"\r\n//         label=\"Марка матеріалу\"\r\n//         placeholder=\"Введіть марку матеріалу\"\r\n//         size=\"small\"\r\n//         value={formik.values.brand}\r\n//         onChange={formik.handleChange}\r\n//         onBlur={formik.handleBlur}\r\n//         error={formik.touched.brand && Boolean(formik.errors.brand)}\r\n//         helperText={formik.touched.brand && formik.errors.brand}\r\n//       />\r\n\r\n//       {formik.values.type === \"sheet\" && (\r\n//         <>\r\n//           <TextField\r\n//             id=\"width\"\r\n//             type=\"number\"\r\n//             name=\"sheetParameters.width\"\r\n//             label=\"Ширина листа\"\r\n//             placeholder=\"Введіть ширину листа\"\r\n//             size=\"small\"\r\n//             value={formik.values.sheetParameters.width}\r\n//             onChange={formik.handleChange}\r\n//             onBlur={formik.handleBlur}\r\n//             error={formik.touched.width && Boolean(formik.errors.width)}\r\n//             helperText={formik.touched.width && formik.errors.width}\r\n//           />\r\n//           <TextField\r\n//             id=\"length\"\r\n//             type=\"number\"\r\n//             name=\"sheetParameters.length\"\r\n//             label=\"Довжина листа\"\r\n//             placeholder=\"Введіть довжину листа\"\r\n//             size=\"small\"\r\n//             value={formik.values.sheetParameters.length}\r\n//             onChange={formik.handleChange}\r\n//             onBlur={formik.handleBlur}\r\n//             error={formik.touched.length && Boolean(formik.errors.length)}\r\n//             helperText={formik.touched.length && formik.errors.length}\r\n//           />\r\n//           <TextField\r\n//             id=\"thickness\"\r\n//             type=\"number\"\r\n//             name=\"sheetParameters.thickness\"\r\n//             inputProps={{ min: \"0.1\", step: \"0.1\" }}\r\n//             label=\"Товщина листа\"\r\n//             placeholder=\"Введіть товщину листа\"\r\n//             size=\"small\"\r\n//             value={formik.values.thickness}\r\n//             onChange={formik.handleChange}\r\n//             onBlur={formik.handleBlur}\r\n//             error={formik.touched.thickness && Boolean(formik.errors.thickness)}\r\n//             helperText={formik.touched.thickness && formik.errors.thickness}\r\n//           />\r\n//         </>\r\n//       )}\r\n\r\n//       {formik.values.type === \"rod\" && (\r\n//         <TextField\r\n//           id=\"diameter\"\r\n//           type=\"number\"\r\n//           name=\"rodParameters.diameter\"\r\n//           label=\"Діаметер прута\"\r\n//           placeholder=\"Введіть діаметер, мм.\"\r\n//           size=\"small\"\r\n//           value={formik.values.rodParameters.diameter}\r\n//           onChange={formik.handleChange}\r\n//           onBlur={formik.handleBlur}\r\n//           error={formik.touched.diameter && Boolean(formik.errors.diameter)}\r\n//           helperText={formik.touched.diameter && formik.errors.diameter}\r\n//         />\r\n//       )}\r\n\r\n//       {formik.values.type && (\r\n//         <TextField\r\n//           id=\"weight\"\r\n//           type=\"number\"\r\n//           name=\"weight\"\r\n//           inputProps={{ min: \"0.001\", step: \"0.001\" }}\r\n//           label={labelWeight}\r\n//           placeholder={placeholderWeight}\r\n//           size=\"small\"\r\n//           value={formik.values.weight}\r\n//           onChange={formik.handleChange}\r\n//           onBlur={formik.handleBlur}\r\n//           error={formik.touched.weight && Boolean(formik.errors.weight)}\r\n//           helperText={formik.touched.weight && formik.errors.weight}\r\n//         />\r\n//       )}\r\n//       <Button\r\n//         type=\"submit\"\r\n//         variant=\"contained\"\r\n//         size=\"large\"\r\n//         sx={{ width: \"300px\", margin: \"0 auto\" }}\r\n//       >\r\n//         Додати матеріал\r\n//       </Button>\r\n//     </FormControl>\r\n//   );\r\n// };\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { Box } from \"@mui/material\";\r\n\r\nimport { selectMaterials } from \"redux/materials/materialsSelector\";\r\n\r\nimport { getMaterials } from \"../../data/fakeAPI\";\r\nimport { Loader } from \"components/Loader\";\r\nimport { MyContainer } from \"components/MyContainer\";\r\nimport { MaterialsList } from \"components/MaterialsList\";\r\nimport { AddMaterialForm } from \"../../components/AddMaterialForm\";\r\n\r\nconst Materials = () => {\r\n  const materials = useSelector(selectMaterials);\r\n\r\n  console.log(materials);\r\n\r\n  return (\r\n    <>\r\n      <MyContainer>\r\n        <Box\r\n          sx={{\r\n            width: \"380px\",\r\n            justifyContent: \"center\",\r\n            borderRadius: 4,\r\n            display: \"flex\",\r\n            mt: 10,\r\n            mb: 6,\r\n            p: 1,\r\n            pt: 3,\r\n            backgroundColor: \"#f5f5f5\",\r\n            boxShadow: \"0 0 8px 0 rgba(0,0,0,.3)\",\r\n          }}\r\n        >\r\n          <AddMaterialForm />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            flexGrow: 1,\r\n            display: { xs: \"none\", md: \"flex\" },\r\n            borderRadius: 4,\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            gap: \"12px\",\r\n            mt: 10,\r\n            mb: 6,\r\n            p: 1,\r\n            backgroundColor: \"#f5f5f5\",\r\n            boxShadow: \"0 0 8px 0 rgba(0,0,0,.3)\",\r\n          }}\r\n        >\r\n          <MaterialsList />\r\n        </Box>\r\n      </MyContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Materials;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'DeleteForever');\nexports.default = _default;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["MyContainer","children","Container","maxWidth","sx","display","gap","height","materials","id","sizeSheet","thicknessSheet","weightSheet","getMaterials","selectMaterials","state","items","MaterialsList","useSelector","console","log","TableContainer","component","Paper","Table","TableHead","TableRow","position","top","zIndex","background","TableCell","align","TableBody","map","material","index","border","type","sheetParameters","thickness","length","width","rodParameters","diameter","weight","IconButton","color","size","DeleteForever","fontSize","_id","initialValues","brand","validationSchema","yup","shape","required","moreThan","notOneOf","AddSheetForm","dispath","useDispatch","formik","useFormik","onSubmit","resetForm","newMaterial","addMaterial","then","res","error","FormControl","variant","handleSubmit","TextField","name","label","placeholder","value","values","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","inputProps","min","step","Button","margin","AddRodForm","TYPEMATERIAL","AddMaterialForm","useState","materialType","setMaterialType","Box","flexDirection","padding","Typography","select","e","selectedType","target","MenuItem","nanoid","justifyContent","borderRadius","mt","mb","p","pt","backgroundColor","boxShadow","flexGrow","xs","md","alignItems","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}