{"version":3,"file":"static/js/917.18dfc8b9.chunk.js","mappings":"iQAQMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,SAAS,0BAC5BC,SAAUJ,EAAAA,KAAaG,SAAS,4BAG5BE,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,EAAgB,CACpBN,KAAM,GACNE,SAAU,IAGCK,EAAY,WACvB,OAAkDC,EAAAA,EAAAA,UAAS,YAAW,eAA/DC,EAAiB,KAAEC,EAAoB,KAExCC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,yCAAG,WAAOC,EAAO,GAAD,4EAAa,OAATC,EAAS,EAATA,UAAS,kBAErCJ,GAASK,EAAAA,EAAAA,IAAMF,IAAS,KAAD,wDAE/BC,IAAY,wDACb,gBALiB,wCAclB,OACE,+BACE,SAAC,KAAM,CACLT,cAAeA,EACfT,iBAAkBA,EAClBoB,SAAUJ,EAAa,UAEvB,UAAC,KAAI,YACH,kBAAOK,QAASf,EAAa,SAAC,qCAC9B,SAAC,KAAK,CACJgB,GAAIhB,EACJiB,KAAK,OACLpB,KAAK,OACLqB,YAAY,+EAGd,SAAC,KAAY,CAACrB,KAAK,OAAOsB,UAAU,OACpC,kBAAOJ,QAASb,EAAgB,SAAC,0CACjC,SAAC,KAAK,CACJc,GAAId,EACJe,KAAMX,EACNT,KAAK,WACLqB,YAAY,qFAEd,mBAAQD,KAAK,SAASG,QA/BT,WACO,aAAtBd,EACFC,EAAqB,QACU,SAAtBD,GACTC,EAAqB,WAEzB,EAyBoD,SACnB,aAAtBD,EACG,wFACA,iGAEN,SAAC,KAAY,CAACT,KAAK,WAAWsB,UAAU,OAExC,mBAAQF,KAAK,SAAQ,SAAC,iDAKhC,ECtEA,EAJyB,WACvB,OAAO,SAACb,EAAS,GACnB,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nimport { logIn } from \"../../redux/auth/authOperation\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n  name: yup.string().required(\"This field is required\"),\r\n  password: yup.string().required(\"This field is required\"),\r\n});\r\n\r\nconst idInputLogin = nanoid();\r\nconst idInputPassword = nanoid();\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const LoginForm = () => {\r\n  const [typeInputPassword, setTypeInputPassword] = useState(\"password\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      await dispatch(logIn(values));\r\n    } catch (error) {}\r\n    resetForm();\r\n  };\r\n\r\n  const showPassword = () => {\r\n    if (typeInputPassword === \"password\") {\r\n      setTypeInputPassword(\"text\");\r\n    } else if (typeInputPassword === \"text\") {\r\n      setTypeInputPassword(\"password\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form>\r\n          <label htmlFor={idInputLogin}> Логін</label>\r\n          <Field\r\n            id={idInputLogin}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Веддіть логін\"\r\n          />\r\n\r\n          <ErrorMessage name=\"name\" component=\"p\" />\r\n          <label htmlFor={idInputPassword}>Пароль</label>\r\n          <Field\r\n            id={idInputPassword}\r\n            type={typeInputPassword}\r\n            name=\"password\"\r\n            placeholder=\"Введіть пароль\"\r\n          />\r\n          <button type=\"button\" onClick={showPassword}>\r\n            {typeInputPassword === \"password\"\r\n              ? \"Показати пароль\"\r\n              : \"Приховати пароль\"}\r\n          </button>\r\n          <ErrorMessage name=\"password\" component=\"p\" />\r\n\r\n          <button type=\"submit\"> Увійти </button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","import { LoginForm } from \"../../components/LoginForm\";\r\n\r\nexport const LoginPage = () => {\r\n  return <LoginForm />;\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["validationSchema","yup","shape","name","required","password","idInputLogin","nanoid","idInputPassword","initialValues","LoginForm","useState","typeInputPassword","setTypeInputPassword","dispatch","useDispatch","handleSubmit","values","resetForm","logIn","onSubmit","htmlFor","id","type","placeholder","component","onClick"],"sourceRoot":""}